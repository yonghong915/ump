<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/context/spring-jdbc-4.3.xsd">

	<!-- Shiro安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroRealm"></property>
		<!-- <property name="sessionManager" ref="sessionManager"/> -->
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>

	<!-- 自定义的Realm -->
	<bean id="shiroRealm" class="com.ump.core.base.service.shiro.ShiroRealm" />

	<!-- 缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:/config/cache/ehcache.xml" />
	</bean>
	
	
	<!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口，这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/login/loginIndex" />
		<!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) 
		<property name="successUrl" value="/backstage/index" />-->
		<!-- 用户访问未对其授权的资源时，所显示的连接 -->
		<property name="unauthorizedUrl" value="/login/loginIndex" />

		<!-- anon:匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤 authc:如果没有登录会跳到相应的登录页面登录 user:用户拦截器，用户已经身份验证/记住我登录的都可 -->
		<property name="filterChainDefinitions">
			<value>
				/resources/js/** = anon
				/resources/libs/** = anon
				/common/** = anon
				/resources/** = anon
				/favicon.ico = anon
				/verifyCode/** = anon
				/backstage/** = anon
				/crypto/** = anon
				/menu/** = anon
				/system_login = anon
				/login/login = anon
				/exterInt/** = anon
				/weixin/** = anon
				/upload/** =anon
				/** = authc
			</value>
		</property>
	</bean>
</beans>